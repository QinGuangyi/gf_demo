// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package hello

import (
	"context"
	"gf_demo/api/hello"
	"gf_demo/internal/service"

	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
)

type Hello struct{}
                                                                                               
func NewHello() *Hello {
	return &Hello{}
}

func (c *Hello) SayHello(req *ghttp.Request) {
	req.Response.Writeln("你好GoFrame")
}

func (c *Hello) Params(ctx context.Context, req *hello.ParamsReq) (res *hello.ParamsRes, err error) {
	r := g.RequestFromCtx(ctx)

	// url get地址参数
	// name := r.GetQuery("name")
	// age := r.GetQuery("age")
	// data := r.GetQueryMap(map[string]interface{}{"age": "0", "name": "lisi"}
	// r.Response.Writeln(name.String() + " hello ")
	// r.Response.Writeln(age.Int())
	// r.Response.Writeln(data)

	//表单参数
	// type user struct {
	// 	UserName string
	// 	Age      int
	// 	Password string
	// }
	// var u user
	// err := r.ParseForm(&u)

	//动态路由参数
	// name := r.GetRouter("name")
	// name := r.GetRouterMap()

	//所有参数
	// dataall := r.GetRequestMap()

	// if err == nil {
	// 		r.Response.Writeln(data)
	// 	}

	r.Response.Writeln(req)

	return
}

func (c *Hello) Respons(ctx context.Context, req *hello.ParamsReq) (res *hello.ParamsRes, err error) {
	r := g.RequestFromCtx(ctx)
	r.Response.Writeln(req)
	return
}

func (c *Hello) Db(req *ghttp.Request) {
	//简单拿数据
	// md := g.Model("book")
	// // book, err := md.One()
	// books, err := md.Fields("id", "name").All()
	// if err == nil {
	// 	req.Response.WriteJson(books)
	// 	// req.Response.Writeln(book["price"].Float32())
	// }

	// 分页拿数据
	// md := g.Model("book")
	// books, err := md.Page(2, 3).All()

	//采用结构体拿数据
	// type Book struct {
	// 	Id          uint
	// 	Name        string
	// 	Author      string
	// 	Price       float64
	// 	PublishTime *gtime.Time
	// }
	// var book *Book
	// md := g.Model("book")
	// err := md.Scan(&book)
	// if err == nil {
	// 	req.Response.WriteJson(book)
	// }

	//事务
	// type Book struct {
	// 	Id          uint
	// 	Name        string
	// 	Author      string
	// 	Price       float64
	// 	PublishTime *gtime.Time
	// }

	// data := g.Map{
	// 	"name":         "c++ primer",
	// 	"author":       "anto",
	// 	"price":        45.4,
	// 	"publish_time": gtime.New("2021-09-22"),
	// }
	// tx, err := g.DB().Begin(req.Context())
	// if err != nil {
	// 	req.Response.WritelnExit("发生错误" + err.Error())
	// }
	// md := tx.Model("book")
	// result, err := md.Insert(data)
	// if err == nil {
	// 	tx.Commit()
	// 	req.Response.WriteJson(result)
	// } else {
	// 	tx.Rollback()
	// 	req.Response.Writeln("发生错误" + err.Error())
	// }

	//采用DAO 链式查询
	// md := dao.Book.Ctx(req.Context())
	// md = md.WhereGT("id", 2)
	// md = md.WhereLT("id", 5)
	// result, err := md.All()
	// if err == nil {
	// 	req.Response.WriteJson(result)
	// } else {
	// 	req.Response.Writeln("发生错误：" + err.Error())
	// }

	//数据的更新 采用entity 若不指定fileds的话，其他字段会初始化为空置
	// md := dao.Book.Ctx(req.Context())
	// data := entity.Book{
	// 	Author: "刘亮",
	// 	Name:   "Go语言从精通到入门",
	// 	Id:     3,
	// }
	// result, err := md.Where("id", 3).Fields("Author").Data(data).Update()

	// if err == nil {
	// 	req.Response.WriteJson(result)
	// } else {
	// 	req.Response.Writeln("发生错误：" + err.Error())
	// }

	////数据的更新 采用do 其他字段不会初始化为空置
	// md := dao.Book.Ctx(req.Context())
	// book := do.Book{
	// 	Price: 97.3,
	// }
	// result, err := md.Where(do.Book{Id: 2}).Data(book).Update()
	// if err == nil {
	// 	req.Response.WriteJson(result)
	// } else {
	// 	req.Response.Writeln("发生错误：" + err.Error())
	// }

	//关联查询 一对一
	// md := dao.Emp.Ctx(req.Context())

	// var emps []entity.Emp

	// err := md.With(entity.Dept{}, entity.Hobby{}).Scan(&emps)
	// if err == nil {
	// 	req.Response.WriteJson(emps)
	// } else {
	// 	req.Response.Writeln("发生错误：" + err.Error())
	// }

	//关联查询 一对多
	// md := dao.Emp.Ctx(req.Context())
	// var depts []*entity.Dept
	// err := md.With(entity.Emp{}).Scan(&depts)
	// if err == nil {
	// 	req.Response.WriteJson(&depts)
	// } else {
	// 	req.Response.Writeln("发生错误：" + err.Error())
	// }

	//采用service和logic
	books, err := service.Book().GetList(req.Context())

	if err == nil {
		req.Response.WriteJson(&books)
	} else {
		req.Response.Writeln("发生错误：" + err.Error())
	}

}
